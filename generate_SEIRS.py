from epi_model import *
from seirsplus.models import *
from seirsplus.networks import *
from seirsplus.sim_loops import *
from seirsplus.utilities import *

def generate_params(G_baseline, R0_mean=2.5, verbose=False):
    
    Nn = len(G_baseline.nodes)
    if verbose:
        print(Nn, "nodes")
    
    # Generate a distribution of expected latent periods (time in Exposed state) and presymptomatic periods (time in Pre-symptomatic infectious state). 
    # The `sigma` and `lamda` rates are calculated as the inverse of the expected exposed and pre-symptomatic periods assigned to each individual, respectively.

    latentPeriod_mean, latentPeriod_coeffvar = 3.0, 0.6
    SIGMA   = 1 / gamma_dist(latentPeriod_mean, latentPeriod_coeffvar, Nn)

    presymptomaticPeriod_mean, presymptomaticPeriod_coeffvar = 2.2, 0.5
    LAMDA   = 1 / gamma_dist(presymptomaticPeriod_mean, presymptomaticPeriod_coeffvar, Nn)

    # Generate a distribution of expected (a)symptomatic periods (time in symptomatic or asymptomatic state). The `gamma` rates are calculated as the inverse of the expected (a)symptomatic periods assigned to each individual. 
    # The expected total infectious period for each individual is the sum of their expected pre-symptomatic and (a)symptomatic periods.

    symptomaticPeriod_mean, symptomaticPeriod_coeffvar = 4.0, 0.4
    GAMMA   = 1 / gamma_dist(symptomaticPeriod_mean, symptomaticPeriod_coeffvar, Nn)

    infectiousPeriod = 1/LAMDA + 1/GAMMA

    # Generate a distribution of expected onset-to-hospitalization periods (time in symptomatic state before entering hospitalized state for those with severe cases) 
    #    and hospitalization-to-discharge periods (time in hospitalized state for those with non-fatal cases). 
    # The `eta` and `gamma_H` rates are calculated as the inverse of the expected onset-to-hospitalization periods and hospitalization-to-discharge periods 
    #    assigned to each individual, respectively.

    onsetToHospitalizationPeriod_mean, onsetToHospitalizationPeriod_coeffvar = 1e6, 0.45
    ETA     = 1 / gamma_dist(onsetToHospitalizationPeriod_mean, onsetToHospitalizationPeriod_coeffvar, Nn)

    hospitalizationToDischargePeriod_mean, hospitalizationToDischargePeriod_coeffvar = 1e6, 0.45
    GAMMA_H = 1 / gamma_dist(hospitalizationToDischargePeriod_mean, hospitalizationToDischargePeriod_coeffvar, Nn)

    # Generate a distribution of hospitalization-to-death periods (time in hospitalized state for those with fatal cases). The `mu_H` rates are calculated as the inverse of the expected hospitalization-to-death periods.

    hospitalizationToDeathPeriod_mean, hospitalizationToDeathPeriod_coeffvar = 1e6, 0.45
    MU_H    = 1 / gamma_dist(hospitalizationToDeathPeriod_mean, hospitalizationToDeathPeriod_coeffvar, Nn)

    # Specify the percentage of cases that are asymptomatic. 

    PCT_ASYMPTOMATIC = 0 # 0.8
    PCT_HOSPITALIZED = 0 # 0.0004

    # Here we specify fatality rates for hospitalized cases, 
    #    again using rates taken from [Verity et al. (2020)](https://www.thelancet.com/journals/laninf/article/PIIS1473-3099(20)30243-7/fulltext).

    PCT_FATALITY = 0 # 0.3627

    # The transmissibility parameter *Œ≤* can be related to the basic reproduction number *R<sub>0</sub>* 
    #    (i.e., the expected number of new infections generated by a single infectious individual in a completely susceptible population) 
    #    by the standard formula: *Œ≤ = R<sub>0</sub>ùõæ*. 
    # *R<sub>0</sub>* is a more interpretable parameter, so we specify transmissibility in terms of *R<sub>0</sub>* and then calculate the corresponding *Œ≤* values.

    # First, we generate a distribution of individual *R<sub>0</sub>* values 
    #    (i.e., the expected number of new infections generated by a single *particular* infectious individual in a completely susceptible population).

    R0_mean     = R0_mean
    R0_coeffvar = 0.2

    R0 = gamma_dist(R0_mean, R0_coeffvar, Nn)

    if verbose:
        dist_info(R0, "Individual R0", bin_size=0.1, plot=True, colors='crimson')

        # information about the distributions just generated
        dist_info([1/LAMDA, 1/SIGMA, 1/LAMDA+1/SIGMA], ["latent period", "pre-symptomatic period", "total incubation period"], plot=True, colors=['gold', 'darkorange', 'black'], reverse_plot=True)
        dist_info([1/LAMDA, 1/GAMMA, 1/LAMDA+1/GAMMA], ["pre-symptomatic period", "(a)symptomatic period", "total infectious period"], plot=True, colors=['darkorange', 'crimson', 'black'], reverse_plot=True)
        #dist_info([1/ETA, 1/GAMMA_H, 1/ETA+1/GAMMA_H], ["onset-to-hospitalization period", "hospitalization-to-discharge period", "onset-to-discharge period"], plot=True, colors=['crimson', 'violet', 'black'], reverse_plot=True)
        #dist_info([1/ETA, 1/MU_H, 1/ETA+1/MU_H], ["onset-to-hospitalization period", "hospitalization-to-death period", "onset-to-death period"], plot=True, colors=['crimson', 'darkgray', 'black'], reverse_plot=True)

    # Individuals are ultimately assigned an [*Individual Transmissibility Value*](https://github.com/ryansmcgee/seirsplus/wiki/ExtSEIRSNetworkModel-Class#transmissibility-parameters) (*Œ≤<sup>i</sup>*), which are stored in the `beta` attribute of the model object. 
    # The means of the Individual Transmissibility Values for infectious subpopulations are used to calculate the 
    #    [global transmission](https://github.com/ryansmcgee/seirsplus/wiki/Extended-SEIRS-Model-Description#global-transmission) terms. 
    #    Individual Transmissibility Values may also be used to generate the Pairwise Transmissibility Values used for 
    #    [local transmission](https://github.com/ryansmcgee/seirsplus/wiki/Extended-SEIRS-Model-Description#local-transmission) terms, as we will specify in a few steps.

    BETA = 1/infectiousPeriod * R0

    # Individuals can be assigned different Individual Transmissibility Values for use when they are asymptomatic and quarantine states. 
    # Here we set the transmissibility of quarantined individuals such that the mean effective reproduction number for quarantined individuals is about 0.3. 
    #    This supposes that individuals have different behavior, hygiene, etc. when they are quarantining relative to baseline.

    BETA_Q = BETA * (0.3/R0_mean)

    # Here we set individual susceptibilities (default susceptibility is 1). 
    ALPHA = 1

    P_GLOBALINTXN = 0 # no casual contact outside of the network
    Q_GLOBALINTXN = 0 # same for "quarantine" (even though that's not happening)
    
    DELTA = np.zeros(Nn)+1

    base_args = {
        'G': G_baseline,
        'p': P_GLOBALINTXN,
        'beta': BETA,
        #'beta_local': wmat_scaled,
        'sigma': SIGMA,
        'lamda': LAMDA,
        'gamma': GAMMA,
        'gamma_asym': GAMMA,
        'eta':ETA,
        'gamma_H':GAMMA_H,
        'mu_H':MU_H,
        'a':PCT_ASYMPTOMATIC,
        'h':PCT_HOSPITALIZED,
        'f':PCT_FATALITY,
        'alpha':ALPHA,
        'beta_pairwise_mode':None, # doesn't matter. we set deltabeta later
        'delta_pairwise_mode':None, # doesn't matter. we set deltabeta later
        'delta': DELTA,
        'G_Q':G_baseline, # doesn't matter
        'q':Q_GLOBALINTXN,
        'beta_Q':BETA_Q,
        'isolation_time':14,
        #'initI_asym':INIT_EXPOSED # note that I'm putting them into the asymptomatic infectious group, to be similar to the other...
    }

    return base_args